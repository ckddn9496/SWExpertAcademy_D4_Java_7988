import java.util.HashSet;
import java.util.Scanner;

class Solution
{
	static int K;
	static String[][] players;
	static boolean[] teamFlag;
	static boolean isAble;
	public static void main(String args[]) throws Exception
	{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		sc.nextLine();
		
		
		for(int test_case = 1; test_case <= T; test_case++)
		{
			K = Integer.parseInt(sc.nextLine());
			isAble = false;
			players = new String[K][2];
			teamFlag = new boolean[K];
			
			for (int i = 0; i < K; i++) {
				players[i] = sc.nextLine().split(" ");
			}

			dfs(0);
			
			if (isAble) {
				System.out.println("#"+test_case+" Yes");
			} else {
				System.out.println("#"+test_case+" No");
			}
		}
		
		
	}

	private static void dfs(int n) {
		if (isAble)
			return;
		
		if (n == K) {
			if (checkTeamAble()) {
				isAble = true;
			}
			return;
		}
		teamFlag[n] = false;
		dfs(n+1);
		teamFlag[n] = true;
		dfs(n+1);
	}

	private static boolean checkTeamAble() {
		HashSet<String>[] teams = new HashSet[2];
		teams[0] = new HashSet<>();
		teams[1] = new HashSet<>();
		
		for (int i = 0; i < K; i++) {
			if (teamFlag[i]) {
				if (teams[0].contains(players[i][1]) || teams[1].contains(players[i][0]))
					return false;

				teams[0].add(players[i][0]);
				teams[1].add(players[i][1]);
			} else {
				if (teams[0].contains(players[i][0]) || teams[1].contains(players[i][1]))
					return false;
				
				teams[0].add(players[i][1]);
				teams[1].add(players[i][0]);				
			}
		}
		for (int i = 0; i < K; i++) {
			if (teams[0].contains(players[i][0]) && teams[0].contains(players[i][1])) {
				return false;
			}
//			else if (teams[0].contains(players[i][0]) && teams[1].contains(players[i][0])) {
//				return false;
//			}
			else if (teams[1].contains(players[i][0]) && teams[1].contains(players[i][1])) {
				return false;
			}
//			else if (teams[0].contains(players[i][1]) && teams[1].contains(players[i][1])) {
//				return false;
//			}
		}
		
		return true;
	}
}